#!/usr/bin/env php
<?php class A{private $a,$b,$c;function __construct(){$d=getcwd();[$this->a,$this->b,$this->c]=["$d/pages","$d/parts","$d/public"];if(!is_dir($this->a)||!is_dir($this->b))die("missing folder");}function B(){foreach($this->C()as$e){$f=$this->D($e);if(!is_dir(dirname($f)))mkdir(dirname($f),0777,true);$g=$this->G($this->F($e,$this->b));file_put_contents($f,$g);}}private function C(){$h=[];$i=new RecursiveIteratorIterator(new RecursiveDirectoryIterator($this->a,FilesystemIterator::SKIP_DOTS));foreach($i as$j)if($j->isFile()&&strtolower($j->getExtension())==='json')$h[]=$j->getPathname();return$h;}private function D($k){$l=str_replace(realpath($this->a),'',realpath($k));return $this->c.dirname($l).DIRECTORY_SEPARATOR.pathinfo($k,PATHINFO_FILENAME).'.php';}private function E($m){$n=file_get_contents($m);return $n.((substr_count($n,'<?')>substr_count($n,'?>'))?' ?>':'');}private function F($q,$r=null){$s='';$r=$r?:$this->b;$t=json_decode(file_get_contents($q),true)['parts'];$u=realpath($this->b);$v=realpath($q);$w=(strpos($v,$u)===0)?dirname($q):$r;foreach($t as$x){$y=strtolower(pathinfo($x,PATHINFO_EXTENSION));if(!in_array($y,['html','php','json']))$s.=$x;else{$z="$w/$x";$s.=($y==='json')?$this->F($z,$w):$this->E($z);}}return$s;}private function G($A1){$B1="";if(strpos($A1,"#!")===0){$F1=strpos($A1,"\n");if($F1!==false){$B1=substr($A1,0,$F1);$A1=substr($A1,$F1+1);}}$C1=token_get_all($A1);$D1="";$E1=false;foreach($C1 as$F2){if(is_string($F2)){$D1.=$F2;$E1=false;continue;}list($G2,$H2)=$F2;if($G2===T_COMMENT||$G2===T_DOC_COMMENT)continue;elseif($G2===T_WHITESPACE){if(!$E1){$D1.=" ";$E1=true;}}elseif($G2===T_INLINE_HTML){$D1.=$this->H($H2);$E1=false;}elseif($G2===T_OPEN_TAG||$G2===T_OPEN_TAG_WITH_ECHO){$I2=rtrim($H2,"\r\n");$D1.=$I2." ";$E1=false;}else{$D1.=$H2;$E1=false;}}$D1=trim($D1);$D1=preg_replace('/\?>\s*<\?php\s*/',' ',$D1);if($B1!=="")$D1=$B1."\n".$D1;return$D1;}private function H($J1){$K1='#(?P<blk><(script|pre|textarea)\b[^>]*>.*?</\2>)#si';$L1=[];$M1=0;$J1=preg_replace_callback($K1,function($N1)use(&$L1,&$M1){$O1="@@HTML_BLOCK_$M1@@";$L1[$O1]=$N1[0];$M1++;return$O1;},$J1);$J1=preg_replace('/<!--(?!\s*\[if).*?-->/', '',$J1);$J1=preg_replace('/\s+/', ' ',$J1);return str_replace(array_keys($L1),array_values($L1),$J1);} }(new A())->B();